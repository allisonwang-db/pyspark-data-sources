{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PySpark Data Sources","text":"<p>Custom Spark data sources for reading and writing data in Apache Spark, using the Python Data Source API.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pyspark-data-sources\n</code></pre> <p>If you want to install one of the extra dependencies, for example <code>datasets</code>, use</p> <pre><code>pip install pyspark-data-sources[datasets]\n</code></pre> <p>If you want to install all extra dependencies, use:</p> <pre><code>pip install pyspark-data-sources[all]\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from pyspark_datasources import GithubDataSource\n\n# Register the data source\nspark.dataSource.register(GithubDataSource)\n\nspark.read.format(\"github\").load(\"apache/spark\").show()\n</code></pre>"},{"location":"#data-sources","title":"Data Sources","text":"Data Source Short Name Description Dependencies GithubDataSource <code>github</code> Read pull requests from a Github repository None FakeDataSource <code>fake</code> Generate fake data using the <code>Faker</code> library <code>faker</code> HuggingFaceDatasets <code>huggingface</code> Read datasets from the HuggingFace Hub <code>datasets</code>"},{"location":"datasources/fake/","title":"FakeDataSource","text":"<p>Requires the <code>Faker</code> library. You can install it manually: <code>pip install faker</code> or use <code>pip install pyspark-data-sources[faker]</code>.</p> <p>             Bases: <code>DataSource</code></p> <p>A fake data source for PySpark to generate synthetic data using the <code>faker</code> library.</p> <p>This data source allows specifying a schema with field names that correspond to <code>faker</code> providers to generate random data for testing and development purposes.</p> <p>The default schema is <code>name string, date string, zipcode string, state string</code>, and the default number of rows is <code>3</code>. Both can be customized by users.</p> <p>Name: <code>fake</code></p> Notes <ul> <li>The fake data source relies on the <code>faker</code> library. Make sure it is installed and accessible.</li> <li>Only string type fields are supported, and each field name must correspond to a method name in   the <code>faker</code> library.</li> </ul> <p>Examples:</p> <p>Register the data source.</p> <pre><code>&gt;&gt;&gt; from pyspark_datasources import FakeDataSource\n&gt;&gt;&gt; spark.dataSource.register(FakeDataSource)\n</code></pre> <p>Use the fake datasource with the default schema and default number of rows:</p> <pre><code>&gt;&gt;&gt; spark.read.format(\"fake\").load().show()\n+-----------+----------+-------+-------+\n|       name|      date|zipcode|  state|\n+-----------+----------+-------+-------+\n|Carlos Cobb|2018-07-15|  73003|Indiana|\n| Eric Scott|1991-08-22|  10085|  Idaho|\n| Amy Martin|1988-10-28|  68076| Oregon|\n+-----------+----------+-------+-------+\n</code></pre> <p>Use the fake datasource with a custom schema:</p> <pre><code>&gt;&gt;&gt; spark.read.format(\"fake\").schema(\"name string, company string\").load().show()\n+---------------------+--------------+\n|name                 |company       |\n+---------------------+--------------+\n|Tanner Brennan       |Adams Group   |\n|Leslie Maxwell       |Santiago Group|\n|Mrs. Jacqueline Brown|Maynard Inc   |\n+---------------------+--------------+\n</code></pre> <p>Use the fake datasource with a different number of rows:</p> <pre><code>&gt;&gt;&gt; spark.read.format(\"fake\").option(\"numRows\", 5).load().show()\n+--------------+----------+-------+------------+\n|          name|      date|zipcode|       state|\n+--------------+----------+-------+------------+\n|  Pam Mitchell|1988-10-20|  23788|   Tennessee|\n|Melissa Turner|1996-06-14|  30851|      Nevada|\n|  Brian Ramsey|2021-08-21|  55277|  Washington|\n|  Caitlin Reed|1983-06-22|  89813|Pennsylvania|\n| Douglas James|2007-01-18|  46226|     Alabama|\n+--------------+----------+-------+------------+\n</code></pre> Source code in <code>pyspark_datasources/fake.py</code> <pre><code>class FakeDataSource(DataSource):\n    \"\"\"\n    A fake data source for PySpark to generate synthetic data using the `faker` library.\n\n    This data source allows specifying a schema with field names that correspond to `faker`\n    providers to generate random data for testing and development purposes.\n\n    The default schema is `name string, date string, zipcode string, state string`, and the\n    default number of rows is `3`. Both can be customized by users.\n\n    Name: `fake`\n\n    Notes\n    -----\n    - The fake data source relies on the `faker` library. Make sure it is installed and accessible.\n    - Only string type fields are supported, and each field name must correspond to a method name in\n      the `faker` library.\n\n    Examples\n    --------\n    Register the data source.\n\n    &gt;&gt;&gt; from pyspark_datasources import FakeDataSource\n    &gt;&gt;&gt; spark.dataSource.register(FakeDataSource)\n\n    Use the fake datasource with the default schema and default number of rows:\n\n    &gt;&gt;&gt; spark.read.format(\"fake\").load().show()\n    +-----------+----------+-------+-------+\n    |       name|      date|zipcode|  state|\n    +-----------+----------+-------+-------+\n    |Carlos Cobb|2018-07-15|  73003|Indiana|\n    | Eric Scott|1991-08-22|  10085|  Idaho|\n    | Amy Martin|1988-10-28|  68076| Oregon|\n    +-----------+----------+-------+-------+\n\n    Use the fake datasource with a custom schema:\n\n    &gt;&gt;&gt; spark.read.format(\"fake\").schema(\"name string, company string\").load().show()\n    +---------------------+--------------+\n    |name                 |company       |\n    +---------------------+--------------+\n    |Tanner Brennan       |Adams Group   |\n    |Leslie Maxwell       |Santiago Group|\n    |Mrs. Jacqueline Brown|Maynard Inc   |\n    +---------------------+--------------+\n\n    Use the fake datasource with a different number of rows:\n\n    &gt;&gt;&gt; spark.read.format(\"fake\").option(\"numRows\", 5).load().show()\n    +--------------+----------+-------+------------+\n    |          name|      date|zipcode|       state|\n    +--------------+----------+-------+------------+\n    |  Pam Mitchell|1988-10-20|  23788|   Tennessee|\n    |Melissa Turner|1996-06-14|  30851|      Nevada|\n    |  Brian Ramsey|2021-08-21|  55277|  Washington|\n    |  Caitlin Reed|1983-06-22|  89813|Pennsylvania|\n    | Douglas James|2007-01-18|  46226|     Alabama|\n    +--------------+----------+-------+------------+\n    \"\"\"\n\n    @classmethod\n    def name(cls):\n        return \"fake\"\n\n    def schema(self):\n        return \"name string, date string, zipcode string, state string\"\n\n    def reader(self, schema: StructType):\n        # Verify the library is installed correctly.\n        try:\n            from faker import Faker\n        except ImportError:\n            raise Exception(\"You need to install `faker` to use the fake datasource.\")\n\n        # Check the schema is valid before proceed to reading.\n        fake = Faker()\n        for field in schema.fields:\n            try:\n                getattr(fake, field.name)()\n            except AttributeError:\n                raise Exception(\n                    f\"Unable to find a method called `{field.name}` in faker. \"\n                    f\"Please check Faker's documentation to see supported methods.\"\n                )\n            if field.dataType != StringType():\n                raise Exception(\n                    f\"Field `{field.name}` is not a StringType. \"\n                    f\"Only StringType is supported in the fake datasource.\"\n                )\n\n        return FakeDataSourceReader(schema, self.options)\n</code></pre>"},{"location":"datasources/github/","title":"GithubDataSource","text":"<p>             Bases: <code>DataSource</code></p> <p>A DataSource for reading pull requests data from Github.</p> <p>Name: <code>github</code></p> <p>Schema: <code>id int, title string, author string, created_at string, updated_at string</code></p> <p>Examples:</p> <p>Register the data source.</p> <pre><code>&gt;&gt;&gt; from pyspark_datasources import GithubDataSource\n&gt;&gt;&gt; spark.dataSource.register(GithubDataSource)\n</code></pre> <p>Load pull requests data from a public Github repository.</p> <pre><code>&gt;&gt;&gt; spark.read.format(\"github\").load(\"apache/spark\").show()\n+---+--------------------+--------+--------------------+--------------------+\n| id|               title|  author|          created_at|          updated_at|\n+---+--------------------+--------+--------------------+--------------------+\n|  1|Initial commit      |  matei |2014-02-03T18:47:...|2014-02-03T18:47:...|\n|...|                 ...|     ...|                 ...|                 ...|\n+---+--------------------+--------+--------------------+--------------------+\n</code></pre> <p>Load pull requests data from a private Github repository.</p> <pre><code>&gt;&gt;&gt; spark.read.format(\"github\").option(\"token\", \"your-token\").load(\"owner/repo\").show()\n</code></pre> Source code in <code>pyspark_datasources/github.py</code> <pre><code>class GithubDataSource(DataSource):\n    \"\"\"\n    A DataSource for reading pull requests data from Github.\n\n    Name: `github`\n\n    Schema: `id int, title string, author string, created_at string, updated_at string`\n\n    Examples\n    --------\n    Register the data source.\n\n    &gt;&gt;&gt; from pyspark_datasources import GithubDataSource\n    &gt;&gt;&gt; spark.dataSource.register(GithubDataSource)\n\n    Load pull requests data from a public Github repository.\n\n    &gt;&gt;&gt; spark.read.format(\"github\").load(\"apache/spark\").show()\n    +---+--------------------+--------+--------------------+--------------------+\n    | id|               title|  author|          created_at|          updated_at|\n    +---+--------------------+--------+--------------------+--------------------+\n    |  1|Initial commit      |  matei |2014-02-03T18:47:...|2014-02-03T18:47:...|\n    |...|                 ...|     ...|                 ...|                 ...|\n    +---+--------------------+--------+--------------------+--------------------+\n\n    Load pull requests data from a private Github repository.\n\n    &gt;&gt;&gt; spark.read.format(\"github\").option(\"token\", \"your-token\").load(\"owner/repo\").show()\n    \"\"\"\n\n    @classmethod\n    def name(self):\n        return \"github\"\n\n    def schema(self):\n        return \"id int, title string, author string, created_at string, updated_at string\"\n\n    def reader(self, schema):\n        return GithubPullRequestReader(self.options)\n</code></pre>"},{"location":"datasources/huggingface/","title":"HuggingFaceDatasets","text":"<p>Requires the <code>datasets</code> library.</p> <p>             Bases: <code>DataSource</code></p> <p>A DataSource for reading HuggingFace Datasets in Spark.</p> <p>This data source allows reading public datasets from the HuggingFace Hub directly into Spark DataFrames. The schema is automatically inferred from the dataset features. The split can be specified using the <code>split</code> option. The default split is <code>train</code>.</p> <p>Name: <code>huggingface</code></p> Notes: <ul> <li>The HuggingFace <code>datasets</code> library is required to use this data source. Make sure it is installed.</li> <li>If the schema is automatically inferred, it will use string type for all fields.</li> <li>Currently it can only be used with public datasets. Private or gated ones are not supported.</li> </ul> <p>Examples:</p> <p>Register the data source.</p> <pre><code>&gt;&gt;&gt; from pyspark_datasources import HuggingFaceDatasets\n&gt;&gt;&gt; spark.dataSource.register(HuggingFaceDatasets)\n</code></pre> <p>Load a public dataset from the HuggingFace Hub.</p> <pre><code>&gt;&gt;&gt; spark.read.format(\"huggingface\").load(\"imdb\").show()\n+--------------------+-----+\n|                text|label|\n+--------------------+-----+\n|I rented I AM CUR...|    0|\n|\"I Am Curious: Ye...|    0|\n|...                 |  ...|\n+--------------------+-----+\n</code></pre> <p>Load a specific split from a public dataset from the HuggingFace Hub.</p> <pre><code>&gt;&gt;&gt; spark.read.format(\"huggingface\").option(\"split\", \"test\").load(\"imdb\").show()\n+--------------------+-----+\n|                text|label|\n+--------------------+-----+\n|I love sci-fi and...|    0|\n|Worth the enterta...|    0|\n|...                 |  ...|\n+--------------------+-----+\n</code></pre> Source code in <code>pyspark_datasources/huggingface.py</code> <pre><code>class HuggingFaceDatasets(DataSource):\n    \"\"\"\n    A DataSource for reading HuggingFace Datasets in Spark.\n\n    This data source allows reading public datasets from the HuggingFace Hub directly into Spark\n    DataFrames. The schema is automatically inferred from the dataset features. The split can be\n    specified using the `split` option. The default split is `train`.\n\n    Name: `huggingface`\n\n    Notes:\n    -----\n    - The HuggingFace `datasets` library is required to use this data source. Make sure it is installed.\n    - If the schema is automatically inferred, it will use string type for all fields.\n    - Currently it can only be used with public datasets. Private or gated ones are not supported.\n\n    Examples\n    --------\n    Register the data source.\n\n    &gt;&gt;&gt; from pyspark_datasources import HuggingFaceDatasets\n    &gt;&gt;&gt; spark.dataSource.register(HuggingFaceDatasets)\n\n    Load a public dataset from the HuggingFace Hub.\n\n    &gt;&gt;&gt; spark.read.format(\"huggingface\").load(\"imdb\").show()\n    +--------------------+-----+\n    |                text|label|\n    +--------------------+-----+\n    |I rented I AM CUR...|    0|\n    |\"I Am Curious: Ye...|    0|\n    |...                 |  ...|\n    +--------------------+-----+\n\n    Load a specific split from a public dataset from the HuggingFace Hub.\n\n    &gt;&gt;&gt; spark.read.format(\"huggingface\").option(\"split\", \"test\").load(\"imdb\").show()\n    +--------------------+-----+\n    |                text|label|\n    +--------------------+-----+\n    |I love sci-fi and...|    0|\n    |Worth the enterta...|    0|\n    |...                 |  ...|\n    +--------------------+-----+\n    \"\"\"\n\n    def __init__(self, options):\n        super().__init__(options)\n        if \"path\" not in options or not options[\"path\"]:\n            raise Exception(\"You must specify a dataset name in`.load()`.\")\n\n    @classmethod\n    def name(cls):\n        return \"huggingface\"\n\n    def schema(self):\n        # The imports must be inside the method to be serializable.\n        from datasets import load_dataset_builder\n        dataset_name = self.options[\"path\"]\n        ds_builder = load_dataset_builder(dataset_name)\n        features = ds_builder.info.features\n        if features is None:\n            raise Exception(\n                \"Unable to automatically determine the schema using the dataset features. \"\n                \"Please specify the schema manually using `.schema()`.\"\n            )\n        schema = StructType()\n        for key, value in features.items():\n            # For simplicity, use string for all values.\n            schema.add(StructField(key, StringType(), True))\n        return schema\n\n    def reader(self, schema: StructType) -&gt; \"DataSourceReader\":\n        return HuggingFaceDatasetsReader(schema, self.options)\n</code></pre>"}]}